{"ast":null,"code":"import _slicedToArray from \"/Users/jonathandelossantos/Desktop/user-directory/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jonathandelossantos/Desktop/user-directory/src/components/Search.js\";\nimport React, { useState, useContext } from 'react';\nimport { EmployeeContext } from './EmployeeContext.js';\nimport \"./Search.css\";\n\nfunction Search() {\n  // stores the characters being entered into the search input\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        search = _useState2[0],\n        setSearch = _useState2[1];\n\n  const _useContext = useContext(EmployeeContext),\n        employees = _useContext.employees,\n        setDisplayedEmployees = _useContext.setDisplayedEmployees;\n\n  function updateSearch({\n    target\n  }) {\n    // just using for readability\n    const searchTerm = target.value; // used for updating the value in the search input, so it always equals exactly what is saved in state\n\n    setSearch(searchTerm); // filters the employees based on the text that is entered in the search input\n\n    const filterResult = employees.filter(function (employee) {\n      // Looks at every employee first name, makes the name lowercase, \n      // ... if first name contains the current search, display \n      // ... if not it is removed from the list.\n      return employee.name.first.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ? true : false;\n    });\n    setDisplayedEmployees([...filterResult]);\n  } // every letter entered triggers the onChange event.\n\n\n  return React.createElement(\"input\", {\n    type: \"text\",\n    onChange: updateSearch,\n    value: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/jonathandelossantos/Desktop/user-directory/src/components/Search.js"],"names":["React","useState","useContext","EmployeeContext","Search","search","setSearch","employees","setDisplayedEmployees","updateSearch","target","searchTerm","value","filterResult","filter","employee","name","first","toLowerCase","indexOf"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,OAAO,cAAP;;AAEA,SAASC,MAAT,GAAiB;AACb;AADa,oBAEeH,QAAQ,CAAC,EAAD,CAFvB;AAAA;AAAA,QAENI,MAFM;AAAA,QAEEC,SAFF;;AAAA,sBAG8BJ,UAAU,CAACC,eAAD,CAHxC;AAAA,QAGNI,SAHM,eAGNA,SAHM;AAAA,QAGKC,qBAHL,eAGKA,qBAHL;;AAKb,WAASC,YAAT,CAAsB;AAACC,IAAAA;AAAD,GAAtB,EAA+B;AAC3B;AACA,UAAMC,UAAU,GAAGD,MAAM,CAACE,KAA1B,CAF2B,CAG3B;;AACAN,IAAAA,SAAS,CAACK,UAAD,CAAT,CAJ2B,CAK3B;;AACA,UAAME,YAAY,GAAGN,SAAS,CAACO,MAAV,CAAiB,UAASC,QAAT,EAAkB;AACpD;AACA;AACA;AACA,aAAOA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,WAApB,GAAkCC,OAAlC,CAA0CR,UAAU,CAACO,WAAX,EAA1C,MAAwE,CAAC,CAAzE,GAA6E,IAA7E,GAAoF,KAA3F;AACH,KALoB,CAArB;AAMAV,IAAAA,qBAAqB,CAAC,CAAC,GAAGK,YAAJ,CAAD,CAArB;AACH,GAlBY,CAmBb;;;AACA,SACG;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAGJ,YAA9B;AAA4C,IAAA,KAAK,EAAEJ,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AAGH;;AACD,eAAeD,MAAf","sourcesContent":["import React, {useState, useContext} from 'react';\nimport { EmployeeContext } from './EmployeeContext.js';\nimport \"./Search.css\"\n\nfunction Search(){\n    // stores the characters being entered into the search input\n    const [search, setSearch] = useState(\"\")\n    const {employees, setDisplayedEmployees} = useContext(EmployeeContext)\n    \n    function updateSearch({target}){\n        // just using for readability\n        const searchTerm = target.value\n        // used for updating the value in the search input, so it always equals exactly what is saved in state\n        setSearch(searchTerm)\n        // filters the employees based on the text that is entered in the search input\n        const filterResult = employees.filter(function(employee){\n            // Looks at every employee first name, makes the name lowercase, \n            // ... if first name contains the current search, display \n            // ... if not it is removed from the list.\n            return employee.name.first.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ? true : false\n        })\n        setDisplayedEmployees([...filterResult])\n    }\n    // every letter entered triggers the onChange event.\n    return(\n       <input type=\"text\" onChange= {updateSearch} value={search}></input>\n    )\n}\nexport default Search;"]},"metadata":{},"sourceType":"module"}