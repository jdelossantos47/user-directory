{"ast":null,"code":"import { useEffect, useContext } from 'react';\nimport { EmployeeContext } from \"../components/EmployeeContext\";\nimport axios from \"axios\";\nexport function useGet(url) {\n  const _useContext = useContext(EmployeeContext),\n        employees = _useContext.employees,\n        setEmployees = _useContext.setEmployees,\n        displayedEmployees = _useContext.displayedEmployees,\n        setDisplayedEmployees = _useContext.setDisplayedEmployees; // gets employees from an api, stores them in both employees, and displayed employees. Only occurs once when component is mounted.\n\n\n  useEffect(() => {\n    async function getEmployees() {\n      try {\n        const response = await axios.get(url); // using employees to store a copy of all the employees that will not be manipulated\n\n        setEmployees(response.data.results); // using displayed employees to be a manipulated version of the employees that will be displayed for sorting and filtering.\n\n        setDisplayedEmployees(response.data.results);\n      } catch (error) {\n        console.log(\"error ocurred getting info from the API: \", error);\n      }\n    }\n\n    getEmployees();\n  }, []); // used to decide which sort function to trigger\n\n  function sortFunc(sort) {\n    switch (sort) {\n      case \"name\":\n        sortByName();\n        break;\n\n      case \"age\":\n        sortByAge();\n        break;\n\n      default:\n        console.log(\"sort does not match any cases\");\n    }\n  } // sorts the employees based on first name.\n\n\n  function sortByName() {\n    employees.sort(function (a, b) {\n      if (a.name.first < b.name.first) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }); // You have to spread, because this creates a new variable, instead of just updating the variable. React will not recognize it as an update if you just update the variable.\n\n    setDisplayedEmployees([...employees]);\n  } // sorts the employees based on age.\n\n\n  function sortByAge() {\n    employees.sort(function (a, b) {\n      return a.dob.age - b.dob.age;\n    });\n    setDisplayedEmployees([...employees]);\n  }\n\n  return {\n    displayedEmployees,\n    sortFunc\n  };\n}","map":{"version":3,"sources":["/Users/jonathandelossantos/Desktop/user-directory/src/hooks/API.js"],"names":["useEffect","useContext","EmployeeContext","axios","useGet","url","employees","setEmployees","displayedEmployees","setDisplayedEmployees","getEmployees","response","get","data","results","error","console","log","sortFunc","sort","sortByName","sortByAge","a","b","name","first","dob","age"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,UAAnB,QAAoC,OAApC;AACA,SAAQC,eAAR,QAA8B,+BAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAoB;AAAA,sBACqDJ,UAAU,CAACC,eAAD,CAD/D;AAAA,QACjBI,SADiB,eACjBA,SADiB;AAAA,QACNC,YADM,eACNA,YADM;AAAA,QACQC,kBADR,eACQA,kBADR;AAAA,QAC4BC,qBAD5B,eAC4BA,qBAD5B,EAGvB;;;AACAT,EAAAA,SAAS,CAAC,MAAK;AACX,mBAAeU,YAAf,GAA6B;AACzB,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAUP,GAAV,CAAvB,CADA,CAEA;;AACAE,QAAAA,YAAY,CAACI,QAAQ,CAACE,IAAT,CAAcC,OAAf,CAAZ,CAHA,CAIA;;AACAL,QAAAA,qBAAqB,CAACE,QAAQ,CAACE,IAAT,CAAcC,OAAf,CAArB;AACH,OAND,CAOA,OAAOC,KAAP,EAAc;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDF,KAAzD;AACH;AACJ;;AACDL,IAAAA,YAAY;AACf,GAdQ,EAcP,EAdO,CAAT,CAJuB,CAoBvB;;AACA,WAASQ,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,YAAOA,IAAP;AACI,WAAK,MAAL;AACIC,QAAAA,UAAU;AACV;;AACJ,WAAK,KAAL;AACIC,QAAAA,SAAS;AACT;;AACJ;AACIL,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AARR;AAUH,GAhCsB,CAkCvB;;;AACA,WAASG,UAAT,GAAqB;AAChBd,IAAAA,SAAS,CAACa,IAAV,CAAe,UAASG,CAAT,EAAWC,CAAX,EAAa;AACzB,UAAGD,CAAC,CAACE,IAAF,CAAOC,KAAP,GAAeF,CAAC,CAACC,IAAF,CAAOC,KAAzB,EAA+B;AAC3B,eAAO,CAAC,CAAR;AACH,OAFD,MAEK;AACD,eAAO,CAAP;AACH;AACJ,KANA,EADgB,CAQjB;;AACAhB,IAAAA,qBAAqB,CAAC,CAAC,GAAGH,SAAJ,CAAD,CAArB;AACH,GA7CsB,CA+CvB;;;AACA,WAASe,SAAT,GAAoB;AAChBf,IAAAA,SAAS,CAACa,IAAV,CAAe,UAASG,CAAT,EAAWC,CAAX,EAAa;AACxB,aAAQD,CAAC,CAACI,GAAF,CAAMC,GAAN,GAAYJ,CAAC,CAACG,GAAF,CAAMC,GAA1B;AACH,KAFD;AAGAlB,IAAAA,qBAAqB,CAAC,CAAC,GAAGH,SAAJ,CAAD,CAArB;AACH;;AAED,SAAO;AAACE,IAAAA,kBAAD;AAAqBU,IAAAA;AAArB,GAAP;AACH","sourcesContent":["import {useEffect, useContext} from 'react';\nimport {EmployeeContext} from \"../components/EmployeeContext\"\nimport axios from \"axios\"\n\nexport function useGet(url){\n    const{employees, setEmployees, displayedEmployees, setDisplayedEmployees} = useContext(EmployeeContext)\n   \n    // gets employees from an api, stores them in both employees, and displayed employees. Only occurs once when component is mounted.\n    useEffect(()=> {\n        async function getEmployees(){\n            try {\n                const response = await axios.get(url)\n                // using employees to store a copy of all the employees that will not be manipulated\n                setEmployees(response.data.results)\n                // using displayed employees to be a manipulated version of the employees that will be displayed for sorting and filtering.\n                setDisplayedEmployees(response.data.results)\n            }\n            catch (error) {\n                console.log(\"error ocurred getting info from the API: \", error)\n            }   \n        }\n        getEmployees()\n    },[])\n\n    // used to decide which sort function to trigger\n    function sortFunc(sort){\n        switch(sort){\n            case \"name\":\n                sortByName()\n                break\n            case \"age\":\n                sortByAge()\n                break\n            default:\n                console.log(\"sort does not match any cases\")\n        }\n    }\n\n    // sorts the employees based on first name.\n    function sortByName(){\n         employees.sort(function(a,b){\n            if(a.name.first < b.name.first){\n                return -1;\n            }else{\n                return 1;\n            }\n        })\n        // You have to spread, because this creates a new variable, instead of just updating the variable. React will not recognize it as an update if you just update the variable.\n        setDisplayedEmployees([...employees])\n    }\n\n    // sorts the employees based on age.\n    function sortByAge(){\n        employees.sort(function(a,b){\n            return (a.dob.age - b.dob.age)\n        })\n        setDisplayedEmployees([...employees])\n    }\n\n    return {displayedEmployees, sortFunc}\n}\n"]},"metadata":{},"sourceType":"module"}